<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classintel_1_1hexl_1_1NTT" kind="class" language="C++" prot="public">
    <compoundname>intel::hexl::NTT</compoundname>
    <includes refid="ntt_8hpp" local="no">ntt.hpp</includes>
    <innerclass refid="structintel_1_1hexl_1_1NTT_1_1AllocatorAdapter" prot="public">intel::hexl::NTT::AllocatorAdapter</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1aea764498b005fc428c70d7fd6c71b308" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_degree_bits</definition>
        <argsstring></argsstring>
        <name>s_max_degree_bits</name>
        <initializer>{20}</initializer>
        <briefdescription>
<para>Maximum power of 2 in degree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="191" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a662241369913641d6496d8b66a034b59" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_modulus_bits</definition>
        <argsstring></argsstring>
        <name>s_max_modulus_bits</name>
        <initializer>{62}</initializer>
        <briefdescription>
<para>Maximum number of bits in modulus;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="194" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ab0db0e033026cff37b7acba889500b6d" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_default_shift_bits</definition>
        <argsstring></argsstring>
        <name>s_default_shift_bits</name>
        <initializer>{64}</initializer>
        <briefdescription>
<para>Default bit shift used in Barrett precomputation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="197" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a5642931d7118e5a6304890f18a92c6dc" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_ifma_shift_bits</definition>
        <argsstring></argsstring>
        <name>s_ifma_shift_bits</name>
        <initializer>{52}</initializer>
        <briefdescription>
<para>Bit shift used in Barrett precomputation when AVX512-IFMA acceleration is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="201" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a4c42c952781ae97d1abf02ab5334143f" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_fwd_32_modulus</definition>
        <argsstring></argsstring>
        <name>s_max_fwd_32_modulus</name>
        <initializer>{1ULL &lt;&lt; (32 - 2)}</initializer>
        <briefdescription>
<para>Maximum modulus to use 32-bit AVX512-DQ acceleration for the forward transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="205" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a33af06994139ae14c69d8958611487bd" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_inv_32_modulus</definition>
        <argsstring></argsstring>
        <name>s_max_inv_32_modulus</name>
        <initializer>{1ULL &lt;&lt; (32 - 1)}</initializer>
        <briefdescription>
<para>Maximum modulus to use 32-bit AVX512-DQ acceleration for the inverse transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="209" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a248f7a613b187a7f71a67b93e4ca13ad" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_fwd_ifma_modulus</definition>
        <argsstring></argsstring>
        <name>s_max_fwd_ifma_modulus</name>
        <initializer>{1ULL &lt;&lt; (<ref refid="classintel_1_1hexl_1_1NTT_1a5642931d7118e5a6304890f18a92c6dc" kindref="member">s_ifma_shift_bits</ref> - 2)}</initializer>
        <briefdescription>
<para>Maximum modulus to use AVX512-IFMA acceleration for the forward transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="213" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a741db1877b630638173b6ed5f9a6e6c7" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t intel::hexl::NTT::s_max_inv_ifma_modulus</definition>
        <argsstring></argsstring>
        <name>s_max_inv_ifma_modulus</name>
        <initializer>{1ULL &lt;&lt; (<ref refid="classintel_1_1hexl_1_1NTT_1a5642931d7118e5a6304890f18a92c6dc" kindref="member">s_ifma_shift_bits</ref> - 1)}</initializer>
        <briefdescription>
<para>Maximum modulus to use AVX512-IFMA acceleration for the inverse transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="217" column="23" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ac41484faffcc5c2b28e67e2e9434a050" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::m_degree</definition>
        <argsstring></argsstring>
        <name>m_degree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="222" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ab7ca32c10ef1e39fc80818d981a4459d" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::m_q</definition>
        <argsstring></argsstring>
        <name>m_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="223" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a2b6b5ebbca9b783e50d83c409d4fd307" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::m_degree_bits</definition>
        <argsstring></argsstring>
        <name>m_degree_bits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="225" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a51027885abd7540b4661ed73eecf3889" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::m_winv</definition>
        <argsstring></argsstring>
        <name>m_winv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="227" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ab8b29317bf63f5e42552673506a0fa14" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::m_w</definition>
        <argsstring></argsstring>
        <name>m_w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="228" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1aa0c4c11c8fe8cf7e321cdc9affd5bdf2" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structintel_1_1hexl_1_1AllocatorBase" kindref="compound">AllocatorBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt;AllocatorBase&gt; intel::hexl::NTT::m_alloc</definition>
        <argsstring></argsstring>
        <name>m_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="230" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a5e114b624bb80345b5ede2f81461482c" prot="private" static="no" mutable="no">
        <type><ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&lt; uint64_t, 64 &gt;</type>
        <definition>AlignedAllocator&lt;uint64_t, 64&gt; intel::hexl::NTT::m_aligned_alloc</definition>
        <argsstring></argsstring>
        <name>m_aligned_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="232" column="20" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a04bb6f1f6b82d10990253ecd16484756" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="235" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ac836d4affd8489cc730557ea98f171ef" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_precon32_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_precon32_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="237" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a4aa83d8ce07822401cc4c9f30d3bd52e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_precon64_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_precon64_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="239" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a32c0c87274355be249bd7b6402441e97" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_avx512_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_avx512_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="243" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a70fcbf1ff8f2591d5f925f13247805ed" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_avx512_precon32_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_avx512_precon32_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="245" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1ac5697dcce55597a302e4c064e3d3cb91" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_avx512_precon52_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_avx512_precon52_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="247" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1aec04ba2216d0c396c704bb04c120a8e2" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_avx512_precon64_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_avx512_precon64_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="249" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a91abec33f5fa0ec5f6bc2c0ea335c575" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_precon32_inv_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_precon32_inv_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="252" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a2c90a66e40d2dfa6babe3ec369fb8325" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_precon52_inv_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_precon52_inv_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="254" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1a9fc75f9773575158dbf57727cfd27a6d" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_precon64_inv_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_precon64_inv_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="256" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classintel_1_1hexl_1_1NTT_1afef36650ec9e3c35aa04021024117ae2" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt;</type>
        <definition>AlignedVector64&lt;uint64_t&gt; intel::hexl::NTT::m_inv_root_of_unity_powers</definition>
        <argsstring></argsstring>
        <name>m_inv_root_of_unity_powers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="258" column="19" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1ade0447617b50232d2a076f99e672d15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>()</argsstring>
        <name>NTT</name>
        <briefdescription>
<para>Initializes an empty <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="40" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1ab6fca1753db0834c692232e8897c725f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::~NTT</definition>
        <argsstring>()</argsstring>
        <name>~NTT</name>
        <briefdescription>
<para>Destructs the <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="43" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a7a86355beefbe191d0e77618eeaaf6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t q, std::shared_ptr&lt; AllocatorBase &gt; alloc_ptr={})</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structintel_1_1hexl_1_1AllocatorBase" kindref="compound">AllocatorBase</ref> &gt;</type>
          <declname>alloc_ptr</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Initializes an <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> object with degree <computeroutput>degree</computeroutput> and modulus <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>also known as N. Size of the <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> transform. Must be a power of 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Prime modulus. Must satisfy <formula id="9">$ q == 1 \mod 2N $</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom memory allocator used for intermediate calculations</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Performs pre-computation necessary for forward and inverse transforms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="54" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a716fd07255e9b68fec80e2a9b98841f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class...</type>
            <declname>AllocatorArgs</declname>
            <defname>AllocatorArgs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t q, Allocator &amp;&amp;a, AllocatorArgs &amp;&amp;... args)</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>Allocator &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>AllocatorArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="58" column="3" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1ac5ef577bf39789c1e200b7d5a7b65989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t q, uint64_t root_of_unity, std::shared_ptr&lt; AllocatorBase &gt; alloc_ptr={})</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>root_of_unity</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structintel_1_1hexl_1_1AllocatorBase" kindref="compound">AllocatorBase</ref> &gt;</type>
          <declname>alloc_ptr</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Initializes an <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> object with degree <computeroutput>degree</computeroutput> and modulus <computeroutput>q</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">degree</parametername>
</parameternamelist>
<parameterdescription>
<para>also known as N. Size of the <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> transform. Must be a power of 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Prime modulus. Must satisfy <formula id="9">$ q == 1 \mod 2N $</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root_of_unity</parametername>
</parameternamelist>
<parameterdescription>
<para>2N&apos;th root of unity in <formula id="10">$ \mathbb{Z_q} $</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom memory allocator used for intermediate calculations</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Performs pre-computation necessary for forward and inverse transforms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a831df901cf9ea5a83e5d628cdbd36671" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class...</type>
            <declname>AllocatorArgs</declname>
            <defname>AllocatorArgs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>intel::hexl::NTT::NTT</definition>
        <argsstring>(uint64_t degree, uint64_t q, uint64_t root_of_unity, Allocator &amp;&amp;a, AllocatorArgs &amp;&amp;... args)</argsstring>
        <name>NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>degree</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>root_of_unity</declname>
        </param>
        <param>
          <type>Allocator &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>AllocatorArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="79" column="3" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a7f8dac5ff3fc117d3e7259762a716140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::NTT::ComputeForward</definition>
        <argsstring>(uint64_t *result, const uint64_t *operand, uint64_t input_mod_factor, uint64_t output_mod_factor)</argsstring>
        <name>ComputeForward</name>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>input_mod_factor</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>output_mod_factor</declname>
        </param>
        <briefdescription>
<para>Compute forward <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref>. Results are bit-reversed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>Data on which to compute the <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Assume input <computeroutput>operand</computeroutput> are in [0, input_mod_factor * q). Must be 1, 2 or 4. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns output <computeroutput>result</computeroutput> in [0, output_mod_factor * q). Must be 1 or 4. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="93" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a31e78375dcafd5df85cb1259a9156a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::NTT::ComputeInverse</definition>
        <argsstring>(uint64_t *result, const uint64_t *operand, uint64_t input_mod_factor, uint64_t output_mod_factor)</argsstring>
        <name>ComputeInverse</name>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>input_mod_factor</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>output_mod_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute inverse <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref>. Results are bit-reversed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>Data on which to compute the <ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Assume input <computeroutput>operand</computeroutput> are in [0, input_mod_factor * q). Must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_mod_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns output <computeroutput>result</computeroutput> in [0, output_mod_factor * q). Must be 1 or 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="103" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1af10476eb10c3b5723052bdf59d7f3d22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::GetMinimalRootOfUnity</definition>
        <argsstring>() const</argsstring>
        <name>GetMinimalRootOfUnity</name>
        <briefdescription>
<para>Returns the minimal 2N&apos;th root of unity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="107" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a25172ec87ce3cbfe9bbc20cd9c52f2ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::GetDegree</definition>
        <argsstring>() const</argsstring>
        <name>GetDegree</name>
        <briefdescription>
<para>Returns the degree N. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="110" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1aef2a5afbd559f7e27d5fa7d4e28bd252" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::GetModulus</definition>
        <argsstring>() const</argsstring>
        <name>GetModulus</name>
        <briefdescription>
<para>Returns the word-sized prime modulus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="113" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a71749beadc3fde1d2b80f2d99b739099" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetRootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetRootOfUnityPowers</name>
        <briefdescription>
<para>Returns the root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="116" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1af0ab14a87e3f9e8cf46502c4c766fec5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::GetRootOfUnityPower</definition>
        <argsstring>(size_t i)</argsstring>
        <name>GetRootOfUnityPower</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the root of unity power at bit-reversed index i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="121" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a1cbd65fb426faafbd22fcb8b7ee98807" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetPrecon32RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetPrecon32RootOfUnityPowers</name>
        <briefdescription>
<para>Returns 32-bit pre-conditioned root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="125" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a3bddde00a1832f4ac175e71469939e51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetPrecon64RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetPrecon64RootOfUnityPowers</name>
        <briefdescription>
<para>Returns 64-bit pre-conditioned root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="131" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1ac93455767a667ef07aa41f747c77b4ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetAVX512RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetAVX512RootOfUnityPowers</name>
        <briefdescription>
<para>Returns the root of unity powers in bit-reversed order with modifications for use by AVX512 implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="137" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1acf8896d7c5ab8c47fe860f3d5a1be215" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetAVX512Precon32RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetAVX512Precon32RootOfUnityPowers</name>
        <briefdescription>
<para>Returns 32-bit pre-conditioned AVX512 root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="143" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1aca9903ac08ed7e06d343f85a0ced8b04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetAVX512Precon52RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetAVX512Precon52RootOfUnityPowers</name>
        <briefdescription>
<para>Returns 52-bit pre-conditioned AVX512 root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="149" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1afb5b2c6cd1135f708c5e8a4e97d6f7da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetAVX512Precon64RootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetAVX512Precon64RootOfUnityPowers</name>
        <briefdescription>
<para>Returns 64-bit pre-conditioned AVX512 root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="155" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a509f384895cf97ef9cd2edd2902eb82a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetInvRootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetInvRootOfUnityPowers</name>
        <briefdescription>
<para>Returns the inverse root of unity powers in bit-reversed order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="160" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a7dd5b59ed992c5466099999ce1eb15d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t intel::hexl::NTT::GetInvRootOfUnityPower</definition>
        <argsstring>(size_t i)</argsstring>
        <name>GetInvRootOfUnityPower</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the inverse root of unity power at bit-reversed index i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="165" column="12" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a70d5480692fcd13418ae7f4c38345770" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetPrecon32InvRootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetPrecon32InvRootOfUnityPowers</name>
        <briefdescription>
<para>Returns the vector of 32-bit pre-conditioned pre-computed root of unity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="172" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a9314e0edf36095233efaf72dc6cb9d5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetPrecon52InvRootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetPrecon52InvRootOfUnityPowers</name>
        <briefdescription>
<para>Returns the vector of 52-bit pre-conditioned pre-computed root of unity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="179" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1a0f7f195efe5166b0f3a8c9e71f3a405a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceintel_1_1hexl_1afbdf0d2cc4209ee547a88ff22a02801b" kindref="member">AlignedVector64</ref>&lt; uint64_t &gt; &amp;</type>
        <definition>const AlignedVector64&lt;uint64_t&gt;&amp; intel::hexl::NTT::GetPrecon64InvRootOfUnityPowers</definition>
        <argsstring>() const</argsstring>
        <name>GetPrecon64InvRootOfUnityPowers</name>
        <briefdescription>
<para>Returns the vector of 64-bit pre-conditioned pre-computed root of unity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="186" column="25" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classintel_1_1hexl_1_1NTT_1aae8497bb26c5421107c9b051eec724cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::NTT::ComputeRootOfUnityPowers</definition>
        <argsstring>()</argsstring>
        <name>ComputeRootOfUnityPowers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="220" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Performs negacyclic forward and inverse number-theoretic transform (<ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref>), commonly used in RLWE cryptography. </para>
    </briefdescription>
    <detaileddescription>
<para>The number-theoretic transform (<ref refid="classintel_1_1hexl_1_1NTT" kindref="compound">NTT</ref>) specializes the discrete Fourier transform (DFT) to the finite field <formula id="8">$ \mathbb{Z}_q[X] / (X^N + 1) $</formula>. </para>
    </detaileddescription>
    <location file="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" line="22" column="1" bodyfile="/home/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/ntt/ntt.hpp" bodystart="22" bodyend="259"/>
    <listofallmembers>
      <member refid="classintel_1_1hexl_1_1NTT_1a7f8dac5ff3fc117d3e7259762a716140" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>ComputeForward</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a31e78375dcafd5df85cb1259a9156a9a" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>ComputeInverse</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aae8497bb26c5421107c9b051eec724cb" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>ComputeRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1acf8896d7c5ab8c47fe860f3d5a1be215" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetAVX512Precon32RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aca9903ac08ed7e06d343f85a0ced8b04" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetAVX512Precon52RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1afb5b2c6cd1135f708c5e8a4e97d6f7da" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetAVX512Precon64RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ac93455767a667ef07aa41f747c77b4ae" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetAVX512RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a25172ec87ce3cbfe9bbc20cd9c52f2ab" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetDegree</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a7dd5b59ed992c5466099999ce1eb15d6" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetInvRootOfUnityPower</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a509f384895cf97ef9cd2edd2902eb82a" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetInvRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1af10476eb10c3b5723052bdf59d7f3d22" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetMinimalRootOfUnity</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aef2a5afbd559f7e27d5fa7d4e28bd252" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetModulus</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a70d5480692fcd13418ae7f4c38345770" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetPrecon32InvRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a1cbd65fb426faafbd22fcb8b7ee98807" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetPrecon32RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a9314e0edf36095233efaf72dc6cb9d5e" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetPrecon52InvRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a0f7f195efe5166b0f3a8c9e71f3a405a" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetPrecon64InvRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a3bddde00a1832f4ac175e71469939e51" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetPrecon64RootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1af0ab14a87e3f9e8cf46502c4c766fec5" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetRootOfUnityPower</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a71749beadc3fde1d2b80f2d99b739099" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>GetRootOfUnityPowers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a5e114b624bb80345b5ede2f81461482c" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_aligned_alloc</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aa0c4c11c8fe8cf7e321cdc9affd5bdf2" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_alloc</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a70fcbf1ff8f2591d5f925f13247805ed" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_avx512_precon32_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ac5697dcce55597a302e4c064e3d3cb91" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_avx512_precon52_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aec04ba2216d0c396c704bb04c120a8e2" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_avx512_precon64_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a32c0c87274355be249bd7b6402441e97" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_avx512_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ac41484faffcc5c2b28e67e2e9434a050" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_degree</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a2b6b5ebbca9b783e50d83c409d4fd307" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_degree_bits</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1afef36650ec9e3c35aa04021024117ae2" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_inv_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a91abec33f5fa0ec5f6bc2c0ea335c575" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_precon32_inv_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ac836d4affd8489cc730557ea98f171ef" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_precon32_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a2c90a66e40d2dfa6babe3ec369fb8325" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_precon52_inv_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a9fc75f9773575158dbf57727cfd27a6d" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_precon64_inv_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a4aa83d8ce07822401cc4c9f30d3bd52e" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_precon64_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ab7ca32c10ef1e39fc80818d981a4459d" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_q</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a04bb6f1f6b82d10990253ecd16484756" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_root_of_unity_powers</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ab8b29317bf63f5e42552673506a0fa14" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_w</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a51027885abd7540b4661ed73eecf3889" prot="private" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>m_winv</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ade0447617b50232d2a076f99e672d15c" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a7a86355beefbe191d0e77618eeaaf6b7" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a716fd07255e9b68fec80e2a9b98841f4" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ac5ef577bf39789c1e200b7d5a7b65989" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a831df901cf9ea5a83e5d628cdbd36671" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>NTT</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ab0db0e033026cff37b7acba889500b6d" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_default_shift_bits</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a5642931d7118e5a6304890f18a92c6dc" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_ifma_shift_bits</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1aea764498b005fc428c70d7fd6c71b308" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_degree_bits</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a4c42c952781ae97d1abf02ab5334143f" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_fwd_32_modulus</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a248f7a613b187a7f71a67b93e4ca13ad" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_fwd_ifma_modulus</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a33af06994139ae14c69d8958611487bd" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_inv_32_modulus</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a741db1877b630638173b6ed5f9a6e6c7" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_inv_ifma_modulus</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1a662241369913641d6496d8b66a034b59" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>s_max_modulus_bits</name></member>
      <member refid="classintel_1_1hexl_1_1NTT_1ab6fca1753db0834c692232e8897c725f" prot="public" virt="non-virtual"><scope>intel::hexl::NTT</scope><name>~NTT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
